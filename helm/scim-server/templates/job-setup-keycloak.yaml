# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH
{{- if .Values.setup.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-setup-keycloak" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" $ ) | nindent 4 }}
spec:
  ttlSecondsAfterFinished: {{ .Values.setup.ttlSecondsAfterFinished }}
  template:
    metadata:
      name: {{ printf "%s-setup-keycloak" (include "common.names.fullname" .) }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
    spec:
      restartPolicy: {{ coalesce .Values.setup.restartPolicy .Values.global.restartPolicy | quote }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        - name: "wait-for-keycloak"
          image: "{{ coalesce .Values.scimServer.waitForDependency.image.registry .Values.global.imageRegistry }}/{{ .Values.scimServer.waitForDependency.image.repository }}{{ if .Values.scimServer.waitForDependency.image.sha256 }}@sha256:{{ .Values.scimServer.waitForDependency.image.sha256 }}{{ else }}:{{ .Values.scimServer.waitForDependency.image.tag }}{{ end }}"
          imagePullPolicy: {{ coalesce .Values.scimServer.waitForDependency.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: KEYCLOAK_URL
              value: {{ required ".Values.keycloak.connection.url is required" (printf "%s/realms/%s" (tpl .Values.keycloak.connection.url .) (tpl .Values.keycloak.connection.realm .)) | quote }}
          command: ["/bin/sh", "-c"]
          args:
          - >
            wait-for-keycloak.py
      containers:
        - name: "keycloak-setup"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.setup.image.registry .Values.global.imageRegistry }}/{{ .Values.setup.image.repository }}{{ if .Values.setup.image.sha256 }}@sha256:{{ .Values.setup.image.sha256 }}{{ else }}:{{ .Values.setup.image.tag }}{{ end }}"
          imagePullPolicy: {{ coalesce .Values.setup.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command: ["/bin/sh", "-c"]
          args:
          - >
              univention-keycloak \
                --keycloak-url ${KEYCLOAK_URL} \
                --realm ${KEYCLOAK_REALM} \
                --binduser ${KEYCLOAK_USERNAME} \
                --bindpwdfile /credentials/keycloak.secret \
                oidc/rp create \
                ${SCIM_API_CLIENT_ID} \
                --service-accounts-enabled \
                --client-secret ${SCIM_API_CLIENT_SECRET} \
                --app-url ${KEYCLOAK_APP_BASE_URL} \
                --redirect-uri ${KEYCLOAK_APP_BASE_URL}/docs/oauth2-redirect \
                --admin-url ${KEYCLOAK_APP_BASE_URL} \
                --pkce-code-challenge-method "" \
                --host-fqdn ${KEYCLOAK_HOST} \
                --web-origins ${KEYCLOAK_APP_BASE_URL}
          env:
            - name: DEBUG
              value: {{ .Values.setup.config.debug.enabled | quote }}
            - name: DOMAIN
              value: {{ .Values.global.domain | quote }}
            - name: KEYCLOAK_USERNAME
              value: {{ tpl .Values.setup.keycloak.auth.username . | quote }}
            - name: KEYCLOAK_HOST
              value: {{ tpl .Values.setup.keycloak.connection.host . | quote }}
            - name: KEYCLOAK_REALM
              value: {{ tpl .Values.keycloak.connection.realm . | quote }}
            - name: KEYCLOAK_URL
              value: {{ tpl .Values.setup.keycloak.connection.baseUrl . | quote }}
            - name: UNIVENTION_KEYCLOAK_BOOTSTRAP_TEMP_DIR
              value: "/tmp"
            - name: UNIVENTION_KEYCLOAK_BOOTSTRAP_DEBUG_PAUSE_BEFORE_SCRIPT_START
              value: {{ .Values.setup.config.debug.pauseBeforeScriptStart | quote }}
            - name: KEYCLOAK_APP_BASE_URL
              value: {{ tpl .Values.setup.config.nubusBaseUrl . | quote }}
            - name: SCIM_API_CLIENT_ID
              value: {{ .Values.config.auth.allowedCliendId | quote }}
            - name: SCIM_API_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.docu.auth.existingSecret.name "defaultNameSuffix" "keycloak-client-secret" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.docu.auth.existingSecret.name "key" "clientSecret") }}
          volumeMounts:
            - mountPath: "/credentials/keycloak.secret"
              name: "keycloak-credentials-volume"
              subPath: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.setup.keycloak.auth.existingSecret.name "key" "password") }}
            - name: "temp-dir"
              mountPath: "/tmp"
      volumes:
        - name: "keycloak-credentials-volume"
          secret:
            secretName: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.setup.keycloak.auth.existingSecret.name "defaultNameSuffix" "setup-secret" "context" .) | quote }}
        - name: "temp-dir"
          emptyDir:
            sizeLimit: "20Mi"
  backoffLimit: {{ .Values.setup.backoffLimit }}
{{- end }}
