# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH


---
{{- $name := include "common.names.fullname" . }}

apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ $name }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" $ ) | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" ( dict "customLabels" .Values.additionalLabels "context" $ ) | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" $ ) | nindent 8 }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ $name }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{ toYaml . | nindent 8 | trim }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 | trim }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 | trim }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- $imagePullSecrets := coalesce .Values.imagePullSecrets .Values.global.imagePullSecrets }}
      {{- if $imagePullSecrets }}
      imagePullSecrets:
        {{- range $imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      initContainers:
        - name: "wait-for-dependency-containers"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.init.image.registry .Values.global.imageRegistry }}/{{ .Values.init.image.repository }}{{ if .Values.init.image.sha256 }}@sha256:{{ .Values.init.image.sha256 }}{{ else }}:{{ .Values.init.image.tag }}{{ end }}"
          imagePullPolicy: {{ coalesce .Values.init.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ printf "%s-init" (include "common.names.fullname" .) }}
          env:
            - name: UDM_API_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-udm-secret" (include "common.names.fullname" .) }}
                  key: udm_username
            - name: UDM_API_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-udm-secret" (include "common.names.fullname" .) }}
                  key: udm_password
          command: ["/bin/sh", "-c"]
          args:
          - >
            wait-for-keycloak.py &&
            wait-for-udm.sh
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      containers:
        - name: "scim-server"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}{{ if .Values.image.sha256 }}@sha256:{{ .Values.image.sha256 }}{{ else }}:{{ .Values.image.tag }}{{ end }}"
          imagePullPolicy: {{ coalesce .Values.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ printf "%s-env" (include "common.names.fullname" .) }}
          env:
            - name: UDM_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-udm-secret" (include "common.names.fullname" .) }}
                  key: udm_username
            - name: UDM_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-udm-secret" (include "common.names.fullname" .) }}
                  key: udm_password
            - name: AUTHENTICATOR_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.oauth.auth.existingSecret "defaultNameSuffix" "keycloak-client-secret" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.oauth.auth.existingSecret "key" "clientSecret") }}
            {{- with .Values.extraEnvVars }}
              {{- . | toYaml | nindent 14 }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.probes.liveness "context" .) | nindent 12 }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.probes.readiness "context" .) | nindent 12 }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.probes.startup "context" .) | nindent 12 }}
          ports:
            {{- range $key, $value := .Values.service.ports }}
            - name: {{ $key }}
              containerPort: {{ $value.containerPort }}
              protocol: {{ $value.protocol }}
            {{- end }}
          volumeMounts:
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
      volumes:
        {{- if .Values.extraVolumes }}
          {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes  "context" .) | nindent 8 }}
        {{- end }}
...
