# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH
{{- if and .Values.setup.enabled .Values.setup.user.create }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-setup-udm" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" $ ) | nindent 4 }}
  {{- if .Values.additionalAnnotations }}
  annotations:
    {{- toYaml .Values.additionalAnnotations | nindent 4 }}
  {{- end }}
spec:
  ttlSecondsAfterFinished: {{ .Values.setup.ttlSecondsAfterFinished }}
  backoffLimit: {{ .Values.setup.backoffLimit }}
  template:
    metadata:
      name: {{ printf "%s-setup-udm" (include "common.names.fullname" .) }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
      {{- if .Values.additionalAnnotations }}
      annotations:
        {{- toYaml .Values.additionalAnnotations | nindent 8 }}
      {{- end }}
    spec:
      restartPolicy: {{ coalesce .Values.setup.restartPolicy .Values.global.restartPolicy "OnFailure" | quote }}
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        - name: "wait-for-udm"
          image: "{{ coalesce .Values.scimServer.waitForDependency.image.registry .Values.global.imageRegistry }}/{{ .Values.scimServer.waitForDependency.image.repository }}{{ if .Values.scimServer.waitForDependency.image.sha256 }}@sha256:{{ .Values.scimServer.waitForDependency.image.sha256 }}{{ else }}:{{ .Values.scimServer.waitForDependency.image.tag }}{{ end }}"
          imagePullPolicy: {{ coalesce .Values.scimServer.waitForDependency.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: UDM_API_URL
              value: {{ required ".Values.udm.connection.url is required" (tpl .Values.udm.connection.url .) | quote }}
            - name: UDM_API_USERNAME
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.udm.auth.existingSecret .Values.udm.auth.existingSecret.name }}
                  name: {{ tpl .Values.udm.auth.existingSecret.name . }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.udm.auth.existingSecret "key" "username") }}
                  {{- else }}
                  name: {{ printf "%s-udm-secret" (include "common.names.fullname" .) }}
                  key: "username"
                  {{- end }}
            - name: UDM_API_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.udm.auth.existingSecret .Values.udm.auth.existingSecret.name }}
                  name: {{ tpl .Values.udm.auth.existingSecret.name . }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.udm.auth.existingSecret "key" "password") }}
                  {{- else }}
                  name: {{ printf "%s-udm-secret" (include "common.names.fullname" .) }}
                  key: "password"
                  {{- end }}
            {{- if .Values.setup.config.debug.enabled }}
            - name: DEBUG
              value: "true"
            - name: PAUSE_BEFORE_SCRIPT_START
              value: {{ .Values.setup.config.debug.pauseBeforeScriptStart | quote }}
            {{- end }}
            {{- range .Values.extraEnvVars }}
            - name: {{ .name }}
              {{- if .value }}
              value: {{ .value | quote }}
              {{- else if .valueFrom }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
          command: ["/bin/sh", "-c"]
          args:
          - >
            wait-for-udm.sh
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
      containers:
        - name: "udm-setup"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.setup.image.registry .Values.global.imageRegistry }}/{{ .Values.setup.image.repository }}{{ if .Values.setup.image.sha256 }}@sha256:{{ .Values.setup.image.sha256 }}{{ else }}:{{ .Values.setup.image.tag }}{{ end }}"
          imagePullPolicy: {{ coalesce .Values.setup.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command: ["/usr/bin/python3", "/scripts/create-user.py"]
          env:
            - name: UDM_URL
              value: {{ required ".Values.udm.connection.url is required" (tpl .Values.udm.connection.url .) | quote }}
            - name: CREATE_GROUP
              value: {{ .Values.setup.user.group.create | quote }}
            - name: UDM_USERNAME
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.udm.auth.existingSecret .Values.udm.auth.existingSecret.name }}
                  name: {{ tpl .Values.udm.auth.existingSecret.name . }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.udm.auth.existingSecret "key" "username") }}
                  {{- else }}
                  name: {{ printf "%s-udm-secret" (include "common.names.fullname" .) }}
                  key: "username"
                  {{- end }}
            - name: UDM_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if and .Values.udm.auth.existingSecret .Values.udm.auth.existingSecret.name }}
                  name: {{ tpl .Values.udm.auth.existingSecret.name . }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.udm.auth.existingSecret "key" "password") }}
                  {{- else }}
                  name: {{ printf "%s-udm-secret" (include "common.names.fullname" .) }}
                  key: "password"
                  {{- end }}
            - name: CREATE_USER_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-setup-create-user-secret" (include "common.names.fullname" .) }}
                  key: new_user_username
            - name: CREATE_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-setup-create-user-secret" (include "common.names.fullname" .) }}
                  key: new_user_password
            - name: CREATE_GROUP_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-setup-create-user-secret" (include "common.names.fullname" .) }}
                  key: new_group_name
            {{- if .Values.setup.config.debug.enabled }}
            - name: DEBUG
              value: "true"
            - name: PAUSE_BEFORE_SCRIPT_START
              value: {{ .Values.setup.config.debug.pauseBeforeScriptStart | quote }}
            {{- end }}
            {{- if .Values.setup.config.nubusBaseUrl }}
            - name: NUBUS_BASE_URL
              value: {{ .Values.setup.config.nubusBaseUrl | quote }}
            {{- end }}
            {{- range .Values.extraEnvVars }}
            - name: {{ .name }}
              {{- if .value }}
              value: {{ .value | quote }}
              {{- else if .valueFrom }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
          volumeMounts:
            - name: "create-user-script"
              mountPath: "/scripts"
            {{- range .Values.extraVolumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
              {{- if .readOnly }}
              readOnly: {{ .readOnly }}
              {{- end }}
            {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
      volumes:
        - name: "create-user-script"
          configMap:
            name: {{ printf "%s-setup-create-user" (include "common.names.fullname" .) }}
        {{- range .Values.extraVolumes }}
        - name: {{ .name }}
          {{- if .configMap }}
          configMap:
            {{- toYaml .configMap | nindent 12 }}
          {{- else if .secret }}
          secret:
            {{- toYaml .secret | nindent 12 }}
          {{- else if .emptyDir }}
          emptyDir:
            {{- toYaml .emptyDir | nindent 12 }}
          {{- else if .persistentVolumeClaim }}
          persistentVolumeClaim:
            {{- toYaml .persistentVolumeClaim | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
{{- end }}
