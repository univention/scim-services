# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2025 Univention GmbH

include:
  - project: "univention/dev/nubus-for-k8s/common-ci"
    ref: "main"
    file:
      - "defaults/stages.yaml"
      - "defaults/nubus-workflow.yaml"
      - "jobs/lint-pre-commit.yaml"
      - "jobs/lint-commit-messages.yaml"
      - "jobs/semantic-release-env.yaml"
      - "jobs/container-build-external.yaml"
      - "jobs/package-and-publish-helm-charts-external.yaml"
      - "jobs/check-debian-updates.yaml"

  - project: "univention/infrastructure/docker-services"
    ref: "master"
    file:
      - "dind.yml"

lint-pre-commit:
  before_script:
    # Compose lint would fail without the referenced env files
    - helm repo add bitnami https://charts.bitnami.com/bitnami

.build-matrix: &build-matrix
  - IMAGE_NAME: "scim-server"
    KANIKO_BUILD_CONTEXT: $CI_PROJECT_DIR
    DOCKERFILE_PATH: "docker/scim-server/Dockerfile"
  - IMAGE_NAME: "testrunner"
    KANIKO_BUILD_CONTEXT: $CI_PROJECT_DIR/docker/scim-server
    DOCKERFILE_PATH: "Dockerfile"
    KANIKO_ARGS: "--target=test"
  - IMAGE_NAME: "scim-consumer-testrunner"
    KANIKO_BUILD_CONTEXT: $CI_PROJECT_DIR
    DOCKERFILE_PATH: "docker/scim-consumer/Dockerfile"
    KANIKO_ARGS: "--target=test"
  - IMAGE_NAME: "scim-consumer"
    KANIKO_BUILD_CONTEXT: $CI_PROJECT_DIR
    DOCKERFILE_PATH: "docker/scim-consumer/Dockerfile"
  - IMAGE_NAME: "scim-dev-server"
    KANIKO_BUILD_CONTEXT: $CI_PROJECT_DIR
    DOCKERFILE_PATH: "docker/scim-dev-server/Dockerfile"

# Separate publish matrix to accomodate testrunner images
# that should not be mirrored to artifacts.software-univention.de
.publish-matrix: &publish-matrix
  - IMAGE_NAME:
      - "scim-server"
      - "scim-consumer"

container-build:
  parallel:
    matrix: *build-matrix

container-malware-scan:
  parallel:
    matrix: *publish-matrix

push-image-external:
  parallel:
    matrix: *publish-matrix

container-sign-external:
  parallel:
    matrix: *publish-matrix

check-debian-updates:
  parallel:
    matrix: *build-matrix
  variables:
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest"

test-unit-and-integration:
  stage: test
  extends: .dind
  image: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.7"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  before_script:
    - cd scim-server/tests
    # Allow that the Docker API version is negotiated between client and server
    - unset DOCKER_API_VERSION
    - export IMAGE_TAG=${RELEASE_VERSION}
    - echo -e "\e[0Ksection_start:`date +%s`:docker_debug[collapsed=true]\r\e[0KDocker version details"
    - echo $IMAGE_TAG
    - docker version
    - echo -e "\e[0Ksection_end:`date +%s`:docker_debug\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:docker_compose_config[collapsed=true]\r\e[0KDocker Compose configuration"
    - docker compose config test
    - echo -e "\e[0Ksection_end:`date +%s`:docker_compose_config\r\e[0K"
  script:
    - docker compose run --quiet-pull --name test-unit-and-integration test
  after_script:
    - docker logs ldap-server >& ldap-server.log
    - docker logs udm-rest-api >& udm-rest-api.log
    - docker cp test-unit-and-integration:/tmp/scim-coverage.xml ./coverage-test-unit-and-integration.xml
    - docker cp test-unit-and-integration:/tmp/pytest-junit.xml ./pytest-junit-test-unit-and-integration.xml
    - docker stop -t0 test-unit-and-integration
    - docker rm test-unit-and-integration
    - docker compose -f scim-server/tests/docker-compose.yml down --volumes
  artifacts:
    paths:
      - ldap-server.log
      - udm-rest-api.log
      - coverage-test-unit-and-integration.xml
      - pytest-junit-test-unit-and-integration.xml
    expire_in: "1 day"
    when: "always"
    expose_as: "docker compose server logs"
    reports:
      junit: pytest-junit-test-unit-and-integration.xml

test-scim2-compliance:
  stage: test
  extends: .dind
  image: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.7"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  before_script:
    - cd scim-server/tests
    - unset DOCKER_API_VERSION
    - export IMAGE_TAG=${RELEASE_VERSION}
    - docker compose up -d ldap-server udm-rest-api scim-server
  script:
    - docker compose run scim2-tester | tee scim2-tester.log 2>&1
  after_script:
    - docker compose down --volumes
  artifacts:
    paths:
      - scim-server/tests/scim2-tester.log
    expire_in: "1 day"
    when: "always"
    expose_as: "SCIM2 Tester logs"
  allow_failure: true

test-helm-charts:
  stage: test
  image: gitregistry.knut.univention.de/univention/dev/nubus-for-k8s/common-helm/testrunner:0.18.0
  script:
    - helm dep build helm/scim-server
    - helm dep build helm/scim-consumer
    - pytest tests/helm_unit

test-scim-consumer:
  stage: test
  extends: .dind
  image: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.7"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  before_script:
    - cd scim-consumer/tests
    # Allow that the Docker API version is negotiated between client and server
    - unset DOCKER_API_VERSION
    - export IMAGE_TAG=${RELEASE_VERSION}
    - echo -e "\e[0Ksection_start:`date +%s`:docker_debug[collapsed=true]\r\e[0KDocker version details"
    - echo $IMAGE_TAG
    - docker version
    - echo -e "\e[0Ksection_end:`date +%s`:docker_debug\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:docker_compose_config[collapsed=true]\r\e[0KDocker Compose configuration"
    - docker compose config test
    - echo -e "\e[0Ksection_end:`date +%s`:docker_compose_config\r\e[0K"
  script:
    - docker compose run --quiet-pull --name test-scim-consumer test | tee scim-consumer-test.log 2>&1
  after_script:
    - docker logs ldap-server >& ldap-server.log
    - docker logs udm-rest-api >& udm-rest-api.log
    - docker logs keycloak >& keycloak.log
    - docker logs scim-dev-server >& scim-dev-server.log
    - docker logs test-scim-consumer >& test-scim-consumer.log
    - docker cp test-scim-consumer:/tmp/pytest-junit.xml ./pytest-junit-test-scim-consumer.xml
    - docker cp test-scim-consumer:/tmp/scim-coverage.xml ./coverage-test-scim-consumer.xml
    - docker stop -t0 test-scim-consumer
    - docker rm test-scim-consumer
    - docker compose -f scim-consumer/tests/docker-compose.yaml down --volumes
  artifacts:
    paths:
      - ldap-server.log
      - udm-rest-api.log
      - scim-dev-server.log
      - test-scim-consumer.log
      - coverage-test-scim-consumer.xml
      - pytest-junit-test-scim-consumer.xml
    expire_in: "1 day"
    when: "always"
    expose_as: "docker compose server logs"
    reports:
      junit: pytest-junit-test-scim-consumer.xml

test-scim-services-integration:
  stage: test
  extends: .dind
  image: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.7"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$AUTO_TRIGGER_TESTS == "yes"'
      when: on_success
    - when: manual
  allow_failure: true
  before_script:
    - cd scim-consumer/tests
    # Allow that the Docker API version is negotiated between client and server
    - unset DOCKER_API_VERSION
    - export IMAGE_TAG=${RELEASE_VERSION}
    - echo -e "\e[0Ksection_start:`date +%s`:docker_debug[collapsed=true]\r\e[0KDocker version details"
    - echo $IMAGE_TAG
    - docker version
    - echo -e "\e[0Ksection_end:`date +%s`:docker_debug\r\e[0K"
    - echo -e "\e[0Ksection_start:`date +%s`:docker_compose_config[collapsed=true]\r\e[0KDocker Compose configuration"
    - docker compose --file docker-compose-univention-scim.yaml config test
    - echo -e "\e[0Ksection_end:`date +%s`:docker_compose_config\r\e[0K"
  script:
    - docker compose --file docker-compose-univention-scim.yaml run --quiet-pull --name test-scim-services test
  after_script:
    - docker logs ldap-server >& ldap-server.log
    - docker logs udm-rest-api >& udm-rest-api.log
    - docker logs scim-server >& scim-server.log
    - docker logs test-scim-services >& test-scim-services.log
    - docker stop -t0 test-scim-services
    - docker rm test-scim-services
    - docker compose -f scim-consumer/tests/docker-compose-univention-scim.yaml down --volumes
  artifacts:
    paths:
      - ldap-server.log
      - udm-rest-api.log
      - scim-server.log
      - test-scim-services.log
    expire_in: "1 day"
    when: "always"
    expose_as: "docker compose server logs"

sonarqube-scan:
  stage: test
  needs:
    - test-unit-and-integration
    - test-scim-consumer
  when: always # Runs the job even if a earlier job in the stage fails.
  image:
      name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/sonarsource/sonar-scanner-cli:11
      entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
      - sonar-scanner/
  script:
    - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED == "true"
